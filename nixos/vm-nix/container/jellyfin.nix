# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:
let
  jellyfinMounts = [
    "home-chin39-mounts-alist.mount"
    "home-chin39-mounts-115\\x2dsingle.mount"
    "home-chin39-mounts-union\\x2d115.mount"
  ];
in
{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."jellyfin" = {
    image = "compose2nix/jellyfin";
    environment = {
      "PGID" = "100";
      "PUID" = "1000";
      "TZ" = "Asia/Shanghai";
      "http_proxy" = "http://192.168.0.240:10809";
      "https_proxy" = "http://192.168.0.240:10809";
    };
    volumes = [
      "/home/chin39/Documents/container/jellyfin/cache:/cache:rw"
      "/home/chin39/Documents/container/jellyfin/config-jellyfin:/config:rw"
      "/home/chin39/Documents/container/jellyfin/fonts:/config/fonts:rw"
      "/home/chin39/mounts:/mounts:rw"
      "/mnt/autofs/data/video/jellyfin:/jellyfin-media:rw"
    ];
    ports = [
      "8096:8096/tcp"
      "7359:7359/tcp"
      "1900:1900/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=jellyfin"
      "--network=jellyfin_default"
    ];
  };
  systemd.services."docker-jellyfin" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
    };
    after = [
      "docker-network-jellyfin_default.service"
      "docker-build-jellyfin.service"
    ] ++ jellyfinMounts;
    requires = [
      "docker-network-jellyfin_default.service"
      "docker-build-jellyfin.service"
    ] ++ jellyfinMounts;
    bindsTo = jellyfinMounts;
    unitConfig = {
      RequiresMountsFor = [ "/mnt/autofs/data" ];
    };
    partOf = [
      "docker-compose-jellyfin-root.target"
    ];
    wantedBy = [
      "docker-compose-jellyfin-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-jellyfin_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "/usr/bin/env docker network rm -f jellyfin_default";
    };
    script = ''
      docker network create jellyfin_default || docker network inspect jellyfin_default
    '';
    partOf = [ "docker-compose-jellyfin-root.target" ];
    wantedBy = [
      "docker-compose-jellyfin-root.target"
    ];
  };

  # Builds
  systemd.services."docker-build-jellyfin" = {
    path = [
      pkgs.docker
      pkgs.git
    ];
    serviceConfig = {
      Type = "oneshot";
      TimeoutSec = 500;
    };
    environment = {
      "http_proxy" = "http://192.168.0.240:10809";
      "https_proxy" = "http://192.168.0.240:10809";
    };
    script = ''
      cd /home/chin39/Documents/container/jellyfin/build
      docker build -t compose2nix/jellyfin .
    '';
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-jellyfin-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };

  systemd.timers."start-jellyfin-stack-delay" = {
    wantedBy = [ "timers.target" ]; # enable the timer
    timerConfig = {
      OnBootSec = "2min"; # delay length
      Unit = "docker-compose-jellyfin-root.target";
    };
  };
}
